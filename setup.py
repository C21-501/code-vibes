#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
"""

import os
import sys
import subprocess
from pathlib import Path


def print_header(text):
    """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "=" * 50)
    print(f"  {text}")
    print("=" * 50 + "\n")


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ. –£ –≤–∞—Å: {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor} - OK")
    return True


def create_virtual_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    if Path("venv").exists():
        response = input("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ")
        if response.lower() != 'y':
            print("‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return True
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        import shutil
        shutil.rmtree("venv")
    
    try:
        subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ pip –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if os.name == 'nt':  # Windows
        pip_path = Path("venv/Scripts/pip")
    else:  # Unix/Linux/MacOS
        pip_path = Path("venv/bin/pip")
    
    if not pip_path.exists():
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
        return False
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        subprocess.run([str(pip_path), "install", "--upgrade", "pip"], check=True)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        subprocess.run([str(pip_path), "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False


def setup_env_file():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ .env"""
    print("\n‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    env_path = Path(".env")
    env_example_path = Path(".env.example")
    
    if env_path.exists():
        response = input("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/n): ")
        if response.lower() != 'y':
            print("‚è© –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env")
            return True
    
    if not env_example_path.exists():
        print("‚ùå –§–∞–π–ª .env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print("\nüìù –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ @BotFather")
    print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot")
    print("   3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")
    print("   4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω\n")
    
    token = input("üîë –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return False
    
    # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open(env_example_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    content = content.replace("your_bot_token_here", token)
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = input("\nüë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    if admin_id:
        content = content.replace("your_telegram_user_id", admin_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env
    with open(env_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω")
    return True


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    dirs = ["logs", "downloads", "temp", "bot_data"]
    
    for dir_name in dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(parents=True)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        else:
            print(f"   ‚è© –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dir_name}")
    
    return True


def print_instructions():
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∑–∞–ø—É—Å–∫—É"""
    print_header("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    print("üìå –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n")
    
    if os.name == 'nt':  # Windows
        print("   1. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("      .\\venv\\Scripts\\activate\n")
        print("   2. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:")
        print("      python bot.py")
    else:  # Unix/Linux/MacOS
        print("   1. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("      source venv/bin/activate\n")
        print("   2. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:")
        print("      python bot.py")
    
    print("\nüìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞: Ctrl+C")
    print("   - –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: deactivate")
    print("   - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: tail -f bot.log")
    
    print("\nüí° –°–æ–≤–µ—Ç: –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è")
    print("   —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header("ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not create_virtual_environment():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return 1
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º .env
    if not setup_env_file():
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_instructions()
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    print("\n" + "=" * 50)
    response = input("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–µ–π—á–∞—Å? (y/n): ")
    
    if response.lower() == 'y':
        print("\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...\n")
        
        if os.name == 'nt':  # Windows
            python_path = Path("venv/Scripts/python")
        else:  # Unix/Linux/MacOS
            python_path = Path("venv/bin/python")
        
        try:
            subprocess.run([str(python_path), "bot.py"])
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    
    return 0


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)