#!/usr/bin/env python3
"""
Telegram Bot - –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters
)
from keyboards import get_main_keyboard, get_inline_keyboard, get_settings_keyboard

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_NAME, WAITING_FOR_AGE = range(2)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ë–î)
user_data = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {
            'username': user.username,
            'first_name': user.first_name,
            'registered': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìù /help - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥\n"
        "‚öôÔ∏è /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "üë§ /profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üé≤ /random - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n"
        "üìä /poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å\n"
        "üí¨ /register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –¥–∏–∞–ª–æ–≥–æ–º\n"
        "üîÑ /echo - –≠—Ö–æ-—Ä–µ–∂–∏–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=get_main_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üîπ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
üîπ /profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ
üîπ /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
üîπ /random [min] [max] - –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
üîπ /poll - –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å
üîπ /register - –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
üîπ /echo [text] - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç
üîπ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

**üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown'
    )


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    if user_id in user_data:
        data = user_data[user_id]
        profile_text = (
            "üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üë§ Username: @{data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìù –ò–º—è: {data.get('first_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data.get('registered', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        )
        
        if 'full_name' in data:
            profile_text += f"üìã –ü–æ–ª–Ω–æ–µ –∏–º—è: {data['full_name']}\n"
        if 'age' in data:
            profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
    else:
        profile_text = "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
    
    await update.message.reply_text(
        profile_text,
        parse_mode='Markdown'
    )


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
    
    await update.message.reply_text(
        settings_text,
        reply_markup=get_settings_keyboard(),
        parse_mode='Markdown'
    )


async def random_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞"""
    import random
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    
    try:
        if len(args) == 2:
            min_val = int(args[0])
            max_val = int(args[1])
        elif len(args) == 1:
            min_val = 1
            max_val = int(args[0])
        else:
            min_val = 1
            max_val = 100
        
        if min_val > max_val:
            min_val, max_val = max_val, min_val
        
        number = random.randint(min_val, max_val)
        
        await update.message.reply_text(
            f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_val} –¥–æ {max_val}:\n\n"
            f"**{number}**",
            parse_mode='Markdown'
        )
    except (ValueError, IndexError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /random [min] [max]\n"
            "–ü—Ä–∏–º–µ—Ä: /random 1 10"
        )


async def create_poll(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"""
    questions = ["–û—Ç–ª–∏—á–Ω–æ! üéâ", "–•–æ—Ä–æ—à–æ üëç", "–ù–æ—Ä–º–∞–ª—å–Ω–æ üòê", "–ü–ª–æ—Ö–æ üëé"]
    
    message = await context.bot.send_poll(
        update.effective_chat.id,
        "üìä –ö–∞–∫ –≤–∞–º —ç—Ç–æ—Ç –±–æ—Ç?",
        questions,
        is_anonymous=False,
        allows_multiple_answers=False,
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
    context.bot_data[message.poll.id] = {
        "questions": questions,
        "message_id": message.message_id,
        "chat_id": update.effective_chat.id,
        "answers": 0,
    }


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠—Ö–æ-—Ñ—É–Ω–∫—Ü–∏—è"""
    text = ' '.join(context.args) if context.args else update.message.text
    
    if text and text != '/echo':
        await update.message.reply_text(f"üîÑ {text}")
    else:
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo\n"
            "–ü—Ä–∏–º–µ—Ä: /echo –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!"
        )


async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "üìù –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ø–æ–ª–Ω–æ–µ –∏–º—è)",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")]
        ])
    )
    return WAITING_FOR_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç"""
    user_id = update.effective_user.id
    name = update.message.text
    
    if user_id not in user_data:
        user_data[user_id] = {}
    
    user_data[user_id]['full_name'] = name
    
    await update.message.reply_text(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!\n\n"
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_registration")]
        ])
    )
    return WAITING_FOR_AGE


async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    user_id = update.effective_user.id
    
    try:
        age = int(update.message.text)
        
        if age < 1 or age > 120:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 120)"
            )
            return WAITING_FOR_AGE
        
        user_data[user_id]['age'] = age
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìã –ò–º—è: {user_data[user_id]['full_name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è",
            reply_markup=get_main_keyboard()
        )
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"
        )
        return WAITING_FOR_AGE


async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"""
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_main_keyboard()
    )
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "cancel_registration":
        await query.message.reply_text(
            "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
    
    elif data.startswith("settings_"):
        setting = data.replace("settings_", "")
        await query.message.edit_text(
            f"‚öôÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É: **{setting.replace('_', ' ').title()}**\n\n"
            "‚ÑπÔ∏è –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            parse_mode='Markdown'
        )
    
    elif data == "back_to_menu":
        await query.message.edit_text(
            "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_inline_keyboard()
        )


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        total_users = len(user_data)
        await update.message.reply_text(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n",
            parse_mode='Markdown'
        )
    
    elif text == "‚ÑπÔ∏è –æ –±–æ—Ç–µ":
        await update.message.reply_text(
            "ü§ñ **–û –±–æ—Ç–µ**\n\n"
            "–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π Telegram –±–æ—Ç –Ω–∞ Python.\n"
            "–°–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ python-telegram-bot.\n\n"
            "üìö –í–µ—Ä—Å–∏—è: 1.0.0\n"
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @your_username\n"
            "üìù –õ–∏—Ü–µ–Ω–∑–∏—è: MIT",
            parse_mode='Markdown'
        )
    
    elif text == "üéÆ –∏–≥—Ä–∞":
        keyboard = [
            [
                InlineKeyboardButton("ü™® –ö–∞–º–µ–Ω—å", callback_data="game_rock"),
                InlineKeyboardButton("üìÑ –ë—É–º–∞–≥–∞", callback_data="game_paper"),
                InlineKeyboardButton("‚úÇÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="game_scissors")
            ]
        ]
        await update.message.reply_text(
            "üéÆ –î–∞–≤–∞–π—Ç–µ —Å—ã–≥—Ä–∞–µ–º –≤ '–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞'!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ö–æ–¥:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        await settings(update, context)
    
    else:
        # –≠—Ö–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.message.reply_text(
            f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )


async def game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä—ã –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞"""
    import random
    
    query = update.callback_query
    await query.answer()
    
    user_choice = query.data.replace("game_", "")
    choices = ["rock", "paper", "scissors"]
    bot_choice = random.choice(choices)
    
    choices_emoji = {
        "rock": "ü™®",
        "paper": "üìÑ", 
        "scissors": "‚úÇÔ∏è"
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if user_choice == bot_choice:
        result = "ü§ù –ù–∏—á—å—è!"
    elif (user_choice == "rock" and bot_choice == "scissors") or \
         (user_choice == "paper" and bot_choice == "rock") or \
         (user_choice == "scissors" and bot_choice == "paper"):
        result = "üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
    else:
        result = "üòî –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!"
    
    await query.message.edit_text(
        f"üéÆ **–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:**\n\n"
        f"–í–∞—à –≤—ã–±–æ—Ä: {choices_emoji[user_choice]}\n"
        f"–ú–æ–π –≤—ã–±–æ—Ä: {choices_emoji[bot_choice]}\n\n"
        f"{result}",
        parse_mode='Markdown'
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("settings", settings))
    application.add_handler(CommandHandler("random", random_number))
    application.add_handler(CommandHandler("poll", create_poll))
    application.add_handler(CommandHandler("echo", echo))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('register', start_registration)],
        states={
            WAITING_FOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            WAITING_FOR_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_registration),
            CallbackQueryHandler(cancel_registration, pattern="^cancel_registration$")
        ],
    )
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^settings_"))
    application.add_handler(CallbackQueryHandler(button_handler, pattern="^back_to_menu$"))
    application.add_handler(CallbackQueryHandler(game_handler, pattern="^game_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()